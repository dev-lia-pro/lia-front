apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

android {
    namespace "pro.lia.app"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "pro.lia.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        // Auto-increment versionCode from CI/CD or use 1 for local builds
        versionCode System.getenv("VERSION_CODE")?.toInteger() ?: 1
        versionName System.getenv("VERSION_NAME") ?: "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        release {
            // CI/CD signing configuration using environment variables
            // For local development, you can create a keystore.properties file
            def envKeystoreFile = System.getenv("KEYSTORE_FILE")
            def envKeystorePassword = System.getenv("KEYSTORE_PASSWORD")
            def envKeyAlias = System.getenv("KEY_ALIAS")
            def envKeyPassword = System.getenv("KEY_PASSWORD")

            if (envKeystoreFile && file(envKeystoreFile).exists()) {
                storeFile file(envKeystoreFile)
                storePassword envKeystorePassword
                keyAlias envKeyAlias
                keyPassword envKeyPassword
            } else {
                // Fallback for local development (optional)
                def keystorePropertiesFile = rootProject.file("keystore.properties")
                if (keystorePropertiesFile.exists()) {
                    def keystoreProperties = new Properties()
                    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                    storeFile file(keystoreProperties['storeFile'])
                    storePassword keystoreProperties['storePassword']
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

// Gradle Play Publisher configuration for automated Play Store deployment
play {
    // Service account credentials for Play Store API
    def serviceAccountJsonFile = System.getenv("PLAY_SERVICE_ACCOUNT_JSON")
    if (serviceAccountJsonFile && file(serviceAccountJsonFile).exists()) {
        serviceAccountCredentials.set(file(serviceAccountJsonFile))
    }

    // Deployment track: internal, alpha, beta, or production
    // Use "internal" for automatic CI/CD deployments (no Google review required)
    track.set(System.getenv("PLAY_TRACK") ?: "internal")

    // Release status: completed, draft, halted, inProgress
    // Use "draft" for apps in draft mode, "completed" for published apps
    def status = System.getenv("PLAY_RELEASE_STATUS") ?: "draft"
    releaseStatus.set(
        status == "completed" ? com.github.triplet.gradle.androidpublisher.ReleaseStatus.COMPLETED :
        status == "halted" ? com.github.triplet.gradle.androidpublisher.ReleaseStatus.HALTED :
        status == "inProgress" ? com.github.triplet.gradle.androidpublisher.ReleaseStatus.IN_PROGRESS :
        com.github.triplet.gradle.androidpublisher.ReleaseStatus.DRAFT
    )

    // Use App Bundle format (required by Play Store)
    defaultToAppBundles.set(true)

    // Automatically generate release notes from git commits (optional)
    // You can customize this in the GitHub Actions workflow
}

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
